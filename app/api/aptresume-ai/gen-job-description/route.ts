import { NextRequest, NextResponse } from "next/server";
import { GoogleGenAI } from "@google/genai";

const GEMINI_API_KEY = process.env.GEMINI_API_KEY;
const genAi = new GoogleGenAI({ apiKey: GEMINI_API_KEY });

export async function POST(req: NextRequest) {
  const body = await req.json();
  const query = body.query;

  if (!query) {
    return NextResponse.json(
      { message: "Missing query parameter" },
      { status: 400 }
    );
  }

  try {
    const response = await genAi.models.generateContent({
      model: "gemini-2.5-flash-lite",
      contents: `Analyse and generate quick response for this job description and return a proper formatted html code starting from <div className="description-content"> as job-description  with inline css for styling with font poppins, no margin, no padding between border and content and no border: ${query} and do not use section tag only div tag. Only code not explanation and all`,
    });

    if (!response.text) {
      return NextResponse.json(
        { message: "No response generated by Gemini API." },
        { status: 500 }
      );
    }

    const data = response.text;
    const match = data.match(/```(?:html)?\n([\s\S]*?)```/);
    const formattedDesc = match ? match[1] : "";

    return NextResponse.json(formattedDesc || data);
  } catch (error) {
    if (error instanceof Error)
      return NextResponse.json(
        {
          message: "Failed to get description.",
        },
        { status: 500 }
      );
  }
}
